{{!< default}}
{{!-- The tag above means: insert everything in this file
into the {body} of the default.hbs template --}}

{{!-- The big featured header, it uses blog cover image as a BG if available --}}
<header class="site-header outer">
    <div class="inner">
        {{> "site-nav"}}
    </div>
</header>
<!--div class="ticker-wrap">
    <div class="ticker-move">
    <div class="ticker-item">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</div>
    <div class="ticker-item">Aliquam consequat varius consequat.</div>
    <div class="ticker-item">Fusce dapibus turpis vel nisi malesuada sollicitudin.</div>
    <div class="ticker-item">Pellentesque auctor molestie orci ut blandit.</div>
    </div>
</div-->
{{> "ticker"}}
{{!-- Everything inside the #post tags pulls data from the post --}}
{{#post}}

<main id="site-main" class="site-main outer">
    <div class="inner">
        <article class="post-full {{post_class}} {{#unless feature_image}}no-image{{/unless}}">

            <header class="post-full-header">
                <h1 class="post-full-title">{{title}}</h1>
            </header>

            {{#if feature_image}}
            <figure class="post-full-image">
                {{!-- This is a responsive image, it loads different sizes depending on device
                https://medium.freecodecamp.org/a-guide-to-responsive-images-with-ready-to-use-templates-c400bd65c433 --}}
                <img srcset="{{img_url feature_image size="s"}} 300w,
                            {{img_url feature_image size="m"}} 600w,
                            {{img_url feature_image size="l"}} 1000w,
                            {{img_url feature_image size="xl"}} 2000w" sizes="(max-width: 800px) 400px,
                            (max-width: 1170px) 700px,
                            1400px" src="{{img_url feature_image size="xl"}}" alt="{{title}}" />
            </figure>
            {{/if}}
            <section class="post-full-content" style="min-height: 0;">
                <div class="post-content">
                    {{content}}
                </div>
            </section>
            <div id="app">
                <div v-cloak>
                    <div class="subscribe-container mb-3">
                        <template v-for="link in podcastLinks">
                            <a :href="link.link" target="_blank">
                                <img :src="link.image" class="subscribe-image m-2">
                            </a>
                        </template>
                    </div>
                    <div v-for="episode in podcast.episodes" class="card m-4">
                        <div class="card-body container-fluid">
                            <div class="row m-3">
                                <div class="col-2 padding-sm">
                                    <img :src="podcast.image" class="img-fluid rounded">
                                </div>
                                <div class="col-10 padding-sm">
                                    <h2 class="card-title episode-title">${episode.title}</h2>
                                    <p v-if="!episode.expand"
                                        class="card-text episode-description episode-description-short"
                                        v-html="episode.description.substring(0,250) + '...'"></p>
                                    <p v-if="episode.expand" class="card-text episode-description"
                                        v-html="episode.description"></p>
                                    <div class="m-3">
                                        <button v-if="!episode.expand" class="btn btn-lg btn-primary"
                                            @click="episode.expand = true">Read More</button>
                                    </div>
                                </div>
                            </div>
                            <div class="row m-3">
                                <div class="column">
                                    <audio controls>
                                        <source :src="episode.enclosureUrl">
                                    </audio>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </article>
    </div>
</main>

{{/post}}

{{!-- The #contentFor helper here will send everything inside it up to the matching #block helper found in default.hbs --}}
{{#contentFor "scripts"}}
<script>
    $(function () {
        var $postContent = $(".post-full-content");
        $postContent.fitVids();
    });
</script>
<script src="https://unpkg.com/vue"></script>
<script>
    var app = new Vue({
        el: '#app',
        data: {
            podcast: {},
            podcastLinks: podcastLinks,
        },
        methods: {
            getFeed: function (url) {
                return fetch(url)
                    .then(response => response.text())
                    .then(text => {
                        parser = new DOMParser();
                        return parser.parseFromString(text, "text/xml");
                    })
                    .then(xml => {
                        console.log(xml);
                        const getElementValue = function (xml, tagName) {
                            return xml.getElementsByTagName(tagName)[0].firstChild.nodeValue;
                        }
                        const xmlChannel = xml.getElementsByTagName("channel")[0];
                        let podcast = {
                            title: getElementValue(xmlChannel, "title"),
                            link: getElementValue(xmlChannel, "link"),
                            description: getElementValue(xmlChannel, "description"),
                            image: getElementValue(xmlChannel.getElementsByTagName("image")[0], "url"),
                        }
                        podcast.episodes = Array.from(xml.getElementsByTagName("item")).map(xmlEpisode => {
                            return {
                                title: xmlEpisode.getElementsByTagName("title")[0].firstChild.nodeValue,
                                link: xmlEpisode.getElementsByTagName("link")[0].firstChild.nodeValue,
                                description: xmlEpisode.getElementsByTagName("description")[0].firstChild.nodeValue,
                                pubDate: new Date(xmlEpisode.getElementsByTagName("pubDate")[0].firstChild.nodeValue),
                                enclosureUrl: xmlEpisode.getElementsByTagName("enclosure")[0].getAttribute("url"),
                                expand: false
                            }
                        })
                        console.log(podcast);
                        return podcast;
                    });
            }
        },
        created: function () {
            this.getFeed(rssUrl).then(podcast => this.podcast = podcast);
        },
        delimiters: ['${', '}']
    })
</script>
<style>
    .episode-description p {
        margin-bottom: 0px;
    }

    .episode-title {
        margin-top: 0px;
    }

    .subscribe-container {
        text-align: center;
    }

    .subscribe-image {
        display: inline-block;
        width: 30px;
        height: 30px;
    }

    .padding-sm {
        padding-left: 5px;
        padding-right: 5px;
    }
</style>
{{/contentFor}}